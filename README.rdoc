= Analytical

Gem for managing multiple analytics services in your rails app.
Initial service implementations include: Google Analytics, Clicky[http://getclicky.com], and KISSMetrics[http://kissmetrics.com].

== Usage

Add the following to your controllers:

    analytical :modules=>[:console, :google, :clicky]

Then, in your template files, you'll want to add the analytical helper methods for initializing the tracking javascript:

    <!DOCTYPE html>
    <html>
      <head>
        <title>Example</title>
        <%= stylesheet_link_tag :all %>
        <%= javascript_include_tag :defaults %>
        <%= csrf_meta_tag %>
        <% analytical.identify '5', :email=>'josh@transfs.com' %>
        <%= raw analytical.head_javascript %>
      </head>
      <body>
        <%= raw analytical.body_prepend_javascript %>
        <%= yield %>
        <%= raw analytical.body_append_javascript %>
      </body>
    </html>

Note the example above also includes an identify() command that will apply to every page.  More likely, you'll want to make this identify() command conditional so that it only applies when you have a logged-in user:

    <% analytical.identify(current_user.id, :email=>current_user.email) if current_user %>

You can sprinkle the track() and event() tracking methods throughout your views & controllers as needed.

    analytical.track '/a/really/nice/url'
    analytical.event 'Some Awesome Event', :with=>:data

By default, Analytical will be disabled in development mode... and it will enable the Console module only.  To change this behavior, you can pass a Proc/lambda to the :disable_if option, as well as specify the :development_modules that you want to use:

    analytical :modules=>[:google], :development_modules=>[], :disable_if=>lambda{ |controller| controller.i_can_haz_tracking? }

== Adding new modules

New modules should be fairly easy to add.  Follow the structure that I've used in the Clicky, Google, and KISSMetrics modules... and you should be fine.  All modules should include the Analytical::Base::Api module, so that they have some default behavior for methods that they don't support or need.


== Note on Patches/Pull Requests

I would be extremely happy to accept contributions to this project!  If you think something should work differently, send me a message and I'd love to discuss your ideas.  Even better:

* Fork the project.
* Make your feature addition or bug fix.
* Add specs for it. This is important so I don't break it in a future version unintentionally.
* Commit, do not mess with rakefile, version, or history.
  (if you want to have your own version, that is fine but bump version in a commit by itself I can ignore when I pull)
* Send me a pull request. Bonus points for topic branches.

== Copyright

Copyright (c) 2010 Joshua Krall. See LICENSE for details.
